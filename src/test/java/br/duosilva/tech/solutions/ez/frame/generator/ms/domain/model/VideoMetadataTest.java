package br.duosilva.tech.solutions.ez.frame.generator.ms.domain.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDateTime;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

class VideoMetadataTest {

    private VideoMetadata videoMetadata;
    private final LocalDateTime testUploadedAt = LocalDateTime.now();

    @BeforeEach
    void setUp() {
        videoMetadata = new VideoMetadata(
                "ignored-id", // The constructor ignores this and generates a random UUID
                "example.mp4",
                "video/mp4",
                1024,
                testUploadedAt,
                "user-123",
                "user@example.com",
                ProcessingStatus.PENDING,
                null,
                null,
                null,
                null
        );
    }

    @Test
    void testConstructor() {
        assertNotNull(videoMetadata);
        assertNotNull(videoMetadata.getId(), "ID should be generated by constructor");
        // Verify that the ID is a valid UUID
        try {
            UUID.fromString(videoMetadata.getId());
        } catch (IllegalArgumentException e) {
            fail("ID should be a valid UUID string");
        }
        assertEquals("example.mp4", videoMetadata.getOriginalFileName());
        assertEquals("video/mp4", videoMetadata.getContentType());
        assertEquals(1024, videoMetadata.getFileSizeBytes());
        assertEquals(testUploadedAt, videoMetadata.getUploadedAt());
        assertEquals("user-123", videoMetadata.getUserId());
        assertEquals("user@example.com", videoMetadata.getUserEmail());
        assertEquals(ProcessingStatus.PENDING, videoMetadata.getStatus());
        assertNull(videoMetadata.getErrorMessage());
        assertNull(videoMetadata.getResultBucketName());
        assertNull(videoMetadata.getResultObjectKey());
        assertNull(videoMetadata.getProcessedAt());
    }

    @Test
    void testMarkAsProcessing() {
        videoMetadata.markAsProcessing();
        assertEquals(ProcessingStatus.PROCESSING, videoMetadata.getStatus());
    }

    @Test
    void testMarkAsCompleted() {
        videoMetadata.markAsCompleted("bucket-name", "object-key");
        assertEquals(ProcessingStatus.COMPLETED, videoMetadata.getStatus());
        assertEquals("bucket-name", videoMetadata.getResultBucketName());
        assertEquals("object-key", videoMetadata.getResultObjectKey());
        assertNotNull(videoMetadata.getProcessedAt());
    }

    @Test
    void testMarkAsFailed() {
        videoMetadata.markAsFailed("An error occurred");
        assertEquals(ProcessingStatus.FAILED, videoMetadata.getStatus());
        assertEquals("An error occurred", videoMetadata.getErrorMessage());
        assertNotNull(videoMetadata.getProcessedAt());
    }

    @Test
    void testSetStatus() {
        videoMetadata.setStatus(ProcessingStatus.PROCESSING);
        assertEquals(ProcessingStatus.PROCESSING, videoMetadata.getStatus());
    }

    @Test
    void testSetErrorMessage() {
        String errorMessage = "Test error message";
        videoMetadata.setErrorMessage(errorMessage);
        assertEquals(errorMessage, videoMetadata.getErrorMessage());
    }

    @Test
    void testSetResultBucketName() {
        String bucketName = "test-bucket";
        videoMetadata.setResultBucketName(bucketName);
        assertEquals(bucketName, videoMetadata.getResultBucketName());
    }

    @Test
    void testSetResultObjectKey() {
        String objectKey = "test-object-key";
        videoMetadata.setResultObjectKey(objectKey);
        assertEquals(objectKey, videoMetadata.getResultObjectKey());
    }

    @Test
    void testSetProcessedAt() {
        LocalDateTime processedAt = LocalDateTime.now().plusHours(1);
        videoMetadata.setProcessedAt(processedAt);
        assertEquals(processedAt, videoMetadata.getProcessedAt());
    }

    @Test
    void testSetNullValues() {
        videoMetadata.setStatus(null);
        videoMetadata.setErrorMessage(null);
        videoMetadata.setResultBucketName(null);
        videoMetadata.setResultObjectKey(null);
        videoMetadata.setProcessedAt(null);

        assertNull(videoMetadata.getStatus());
        assertNull(videoMetadata.getErrorMessage());
        assertNull(videoMetadata.getResultBucketName());
        assertNull(videoMetadata.getResultObjectKey());
        assertNull(videoMetadata.getProcessedAt());
    }

    @Test
    void testGetters() {
        assertNotNull(videoMetadata.getId(), "ID should be generated by constructor");
        // Verify that the ID is a valid UUID
        try {
            UUID.fromString(videoMetadata.getId());
        } catch (IllegalArgumentException e) {
            fail("ID should be a valid UUID string");
        }
        assertEquals("example.mp4", videoMetadata.getOriginalFileName());
        assertEquals("video/mp4", videoMetadata.getContentType());
        assertEquals(1024, videoMetadata.getFileSizeBytes());
        assertEquals(testUploadedAt, videoMetadata.getUploadedAt());
        assertEquals("user-123", videoMetadata.getUserId());
        assertEquals("user@example.com", videoMetadata.getUserEmail());
    }
}